
    # Segment notes :

    # This segment is used to envelope the interchange, as well as to 
    # identify both, the party to whom the interchange is sent and the 
    # party who has sent the interchange. The principle of the UNB seg
    # ment is the same as a physical envelope which covers one or more 
    # letters or documents, and which details, both the address where 
    # delivery is to take place and the address from where the envelope has come.

    # S001: The character encoding specified in basic code table of ISO/IEC 
    # 646 (7-bit coded character set for information interchange) shall be 
    # used for the interchange service string advice (if used) and up to and 
    # including the composite data element S001 'Syntax identifier' in the 
    # interchange header. The character repertoire used for the characters 
    # in an interchange shall be identified from the code value of data 
    # element 0001 in S001 'Syntax identifier' in the interchange header.
    # The character repertoire identified does not apply to objects and/or
    # encrypted data.

    # The default encoding technique for a particular repertoire shall be 
    # the encoding technique defined by its associated character set specification.

    # DE 0001: The recommended (default) character set for use in EANCOM® for 
    # international exchanges is character set A (UNOA). Should users wish to 
    # use character sets other than A, an agreement on which set to use should 
    # be reached on a bilateral basis before communications begin.

    # DE 0004, 0008, 0010, 0014, 0042 and 0046: Within EANCOM® the use of 
    # the Global Location Number (GLN) is recommended for the identification 
    # of the interchange sender and recipient.

    # DE 0008: Identification (e.g. a division) specified by the sender 
    # of the interchange, to be included if agreed, by the recipient in 
    # response interchanges, to facilitate internal routing.

    # DE 0042: Sub-level of sender internal identification, when further 
    # sub-level identification is required.

    # DE 0014: The address for routing, provided beforehand by the 
    # interchange recipient, is used by the interchange sender to inform 
    # the recipient of the internal address, within the latter's systems, 
    # to which the interchange should be routed. It is recommended that 
    # the GLN be used for this purpose.

    # DE 0007: Identification (e.g. a division) specified by the recipient 
    # of the interchange, to be included if agreed, by the sender in response 
    # interchanges, to facilitate internal routing.

    # DE 0046: Sub-level of recipient internal identification, when further 
    # sub-level identification is required.

    # DE S004: The date and time specified in this composite should be the 
    # date and time at which the interchange sender prepared the interchange. 
    # This date and time may not necessarily be the same as the date and time 
    # of contained messages.

    # DE 0020: The interchange control reference number is generated by the 
    # interchange sender and is used to identify uniquely each interchange. 
    # Should the interchange sender wish to re-use interchange control 
    # reference numbers, it is recommended that each number be preserved for 
    # at least a period of three months before being re-used. In order to 
    # guarantee uniqueness, the interchange control reference number should 
    # always be linked to the interchange sender's identification (DE 0004).

    # DE S005: The use of passwords must first be agreed bilaterally by the 
    # parties exchanging the interchange.

    # DE 0026: This data element is used to identify the application, on the 
    # interchange recipient's system, to which the interchange is directed. 
    # This data element may only be used if the interchange contains only one 
    # type of message, (e.g. only invoices). The reference used in this data 
    # element is assigned by the interchange sender.

    # DE 0031: This data element is used to indicate whether an acknowledgement 
    # to the interchange is required. The EANCOM® APERAK or CONTRL message 
    # should be used to provide acknowledgement of interchange receipt. In 
    # addition, the EANCOM® CONTRL message may be used to indicate when an 
    # interchange has been rejected due to syntax errors.

    # DE 0032: This data element is used to identify any underlying agreements 
    # which control the exchange of data. Within EANCOM® , the identity of such 

    # UNB+UNOA:3+5412345678908:14+8798765432106:14+020102:1000+12345555+++++EANCOMREF 52'

class data:
    def __init__(self):
        # 000
        self.rName = -1

        # 010
        #   S001  SYNTAX IDENTIFIER M M . See Part I chapter 5.2.7 and segment notes.
        self.r0001 = -1 # Syntax identifier		M a4	M	*	UNOA = UN/ECE level A
					# UNOB = UN/ECE level B
					# UNOC = UN/ECE level C
					# UNOD = UN/ECE level D
					# UNOE = UN/ECE level E
					# UNOF = UN/ECE level F

        self.r0002 = -1 # Syntax version number		M an1	M	*	3 = Version 3
        self.r0080 = '' # Service code list directory version number		C an..6	N
        self.r0133 = '' # Character encoding, coded		C an..3	N

        # 020
        #   S002	INTERCHANGE SENDER		M	M
        self.r0004 = -1
        self.r0007 = '' # Identification code qualifier		C an..4	R	*	14 = GS1
        self.r0008 = '' # Interchange sender internal identification		C an..35	O
        self.r0042 = '' # Interchange sender internal sub-identification		C an..35	N

        # 030
        #   S003	INTERCHANGE RECIPIENT		M	M
        self.r0010 = -1 # Interchange recipient identification		M an..35	M	.	GLN (n13)
        # self.r0007 = '' # Identification code qualifier		C an..4	R	*	14 = GS1
        self.r0014 = '' # Interchange recipient internal identification		C an..35	O			

        self.r0046 = '' # Interchange recipient internal sub-identification		C an..35	N   			

        #040
        #   S004	DATE AND TIME OF		M	M   PREPARATION			
        self.r0017 = -1 # Date		M n8	M	.	YYMMDD
        self.r0019 = -1 # Time		M n4	M	.	HHMM
        self.r0020 = '' # Interchange control reference		M an..14	M	.	Unique reference identifying the interchange. Created by the interchange sender.

        # 050
        #   S005	RECIPIENT REFERENCE/ PASSWORD DETAILS		C	O
        self.r0022 = '' # Recipient reference/password		M an..14	M
        self.r0025 = '' # Recipient reference/password qualifier		C an2	O

        # 060
        self.r0026 = '' # Application reference		C an..14	O	.	Message identification if the interchange contains only one type of message.

        # 070
        self.r0029 = '' # Processing priority code		C a1	O       A = Highest priority

        # 080
        self.r0031 = '' # Acknowledgement request		C n1	O	.	1 = Requested

        # 090
        self.r0032 = '' # Interchange agreement identifier		C an..35	O	*	EANCOM......

        # 100
        self.r0035 = '' # Test indicator		C n1	O	.	1 = Interchange is a test


    def Element_init(dataset):
        data_position = dataset.position
        if data_position == 0:
            data.sName(dataset.data)
        elif data_position == 1:
            data.s001(dataset.data)
        elif data_position == 2:
            data.s002(dataset.data)
        elif data_position == 3:
            data.s003(dataset.data)
        elif data_position == 4:
            data.s004(dataset.data)
        elif data_position == 5:
            data.s005(dataset.data)
        elif data_position == 6:
            data.sr0026(dataset.data)
        elif data_position == 7:
            data.sr0029(dataset.data)
        elif data_position == 8:
            data.sr0031(dataset.data)
        elif data_position == 9:
            data.sr0032(dataset.data)
        elif data_position == 10:
            data.sr0035(dataset.data)

    # 000
    class sName:
        def __init__(self, dataset):
            if len(dataset)>0:
                data.rName = dataset[0].data

    # 010
    class s001: # SYNTAX IDENTIFIER M M . See Part I chapter 5.2.7 and segment notes.
        def __init__(self, dataset):
            data.r0001 = dataset[0] # Syntax identifier M a4 M * 
            data.r0002 = dataset[1] # Syntax version number M an1 M * 3 = Version 3
                # Syntax identifier
                # UNOA = UN/ECE level A
                # UNOB = UN/ECE level B
                # UNOC = UN/ECE level C
                # UNOD = UN/ECE level D
                # UNOE = UN/ECE level E
                # UNOF = UN/ECE level F
            if len(dataset)>2:
                data.r0080 = dataset[2].data
            if len(dataset)>3:
                data.r0133 = dataset[3].data

    # 020
    class s002: # INTERCHANGE SENDER M M .
    # Interchange sender internal sub-identification C an..35 N .
        def __init__(self, dataset): 
            data.r0004 = dataset[0].data # Interchange sender identification M an..35 M . GLN (n13)
            if len(dataset)>1:
                data.r0007 = dataset[1].data # Identification code qualifier C an..4 R * 14 = GS1
            if len(dataset)>2:
                data.r0008 = dataset[2].data # Interchange sender internal identification C an..35 O .
            if len(dataset)>3:
                data.r0042 = dataset[3].data

    # 030
    class s003: # INTERCHANGE RECIPIENT M M .
        def __init__(self, dataset):
            data.r0010 = dataset[0].data # Interchange recipient identification M an..35 M . GLN (n13) 
            if len(dataset)>1:
                data.r0007 = dataset[1].data # Identification code qualifier C an..4R * 14 = GS1
            if len(dataset)>2:
                data.r0014 = dataset[2].data # Interchange recipient internal identification C an..35 O .
            if len(dataset)>3:
                data.r0046 = dataset[3].data # Interchange recipient internal sub-identification C an..35 N .

    # 040
    class s004: # DATE/TIME OF PREPARATION
        def __init__(self, dataset):
            data.r0017 = dataset[0].data # Date M n8 M . YYMMDD
            data.r0019 = dataset[1].data # Time M n4 M . HHMM
            if len(dataset)>2:
                data.r0020 = dataset[2].data # Interchange control reference M an..14 M . Unique reference identifying the interchange. Created by the interchange sender.

    # 050
    class s005: # RECIPIENTS REFERENCE,PASSWORD
        def __init__(self, dataset):
            data.r0022 = dataset[0] # M
            if len(dataset)>1:
                data.r0025 = dataset[1] # C

    # 060
    class sr0026: # APPLICATION REFERENCE
        def __init__(self, dataset):
            data.r0026 = dataset[0].data # C

    # 070
    class sr0029: # PROCESSING PRIORITY CODE
        def __init__(self, dataset):
            data.r0029 = dataset[0].data # C

    # 080
    class sr0031: # ACKNOWLEDGEMENT REQUEST
        def __init__(self, dataset):
            global data
            # dataset = dataset[0]
            data.r0031 = dataset[0].data # C

    # 090
    class sr0032: # COMMUNICATIONS AGREEMENT ID
        def __init__(self, dataset):
            global data
            # dataset = dataset[0]
            data.r0032 = dataset[0].data # C

    # 100
    class sr0035: # TEST INDICATOR
        def __init__(self, dataset):
            global data
            # dataset = dataset[0]
            data.r0035 = dataset[0].data # C


def Set(segmentlist):
    data.__init__(data)
    for element in segmentlist:
        data.Element_init(element)
    return data

    